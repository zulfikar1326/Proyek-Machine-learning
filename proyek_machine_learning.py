# -*- coding: utf-8 -*-
"""Proyek Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WrGIGdOcws0V8U7FoscBXf12fhdgSQa8
"""

import pandas as pd
import re
import string
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import LinearSVC
from sklearn.linear_model import LogisticRegression

nltk.download('stopwords')

data = pd.read_csv('reviews.csv')

# Inisialisasi
stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

print("============================================= INFORMASI DATA =============================================")
data.info()

print("============================================= HEAD DATA =============================================")
data.head()

removeColumns = [
    "images/0","images/1","images/2","images/3","images/4","images/5","images/6","images/7",
    "reviewID","reviewURL","videos/0","productASIN","reviewMetadata"
]

data.to_csv("sesudahHapusColum.csv",index=False)
data.drop(removeColumns, axis=1, inplace=True)

data.head()

colum_clean = [
    "productVariant", "reviewTitle", "reviewText","cleaned_review_text"
]
def preprocess_text(text):
    # Lowercase
    text = text.lower()

    # Hapus angka
    text = re.sub(r'\d+', '', text)

    # Hapus tanda baca
    text = text.translate(str.maketrans('', '', string.punctuation))

    # Tokenisasi dan hapus stopwords
    tokens = text.split()
    filtered_tokens = [t for t in tokens if t not in stop_words]

    # Stemming
    stemmed = [stemmer.stem(t) for t in filtered_tokens]

    return ' '.join(stemmed)


X_raw = data["cleaned_review_text"].astype(str)
y_score = data["sentiment_score"]

for i in colum_clean:
  data[i] = data[i].astype(str)
  data[i] = data[i].apply(preprocess_text)


# Konversi skor ke label kategori
y = pd.cut(y_score, bins=[-1, 0.3, 0.6, 1.0], labels=["Negatif", "Netral", "Positif"])
valid_idx = y.notna()
X_raw = X_raw[valid_idx]
y = y[valid_idx]

# TF-IDF
tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1, 2))
X_tfidf = tfidf.fit_transform(X_raw[valid_idx]) # Apply filtering to X_raw

# Encode label
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# Split Dataset
X_train, X_test, y_train, y_test = train_test_split(
    X_tfidf, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

print("X shape:", X_tfidf.shape)
print("Label distribution:", pd.Series(y).value_counts())

# Inisialisasi model
model_svm = LinearSVC()
model_logreg = LogisticRegression(max_iter=1000)
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)

# Training
model_svm.fit(X_train, y_train)
model_logreg.fit(X_train, y_train)
model_rf.fit(X_train, y_train)

# Prediksi
y_pred_svm = model_svm.predict(X_test)
y_pred_logreg = model_logreg.predict(X_test)
y_pred_rf = model_rf.predict(X_test)

# Evaluasi
print("==========================================================================================")
print("SVM:\n", classification_report(y_test, y_pred_svm, target_names=le.classes_))
print("==========================================================================================")
print("Logistic Regression:\n", classification_report(y_test, y_pred_logreg, target_names=le.classes_))
print("==========================================================================================")
print("Random Forest:\n", classification_report(y_test, y_pred_rf, target_names=le.classes_))

import matplotlib.pyplot as plt

models = ['SVM', 'Logistic Regression', 'Random Forest']
accuracies = [
    accuracy_score(y_test, y_pred_svm),
    accuracy_score(y_test, y_pred_logreg),
    accuracy_score(y_test, y_pred_rf)
]

plt.bar(models, accuracies, color=['blue', 'green', 'orange'])
plt.ylabel("Accuracy")
plt.title("Perbandingan Akurasi Model")
plt.ylim(0, 1)
plt.show()